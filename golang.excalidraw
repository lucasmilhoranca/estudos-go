{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "type": "text",
      "version": 564,
      "versionNonce": 80989813,
      "isDeleted": false,
      "id": "_-LZh7j9vUWHuiJfSQiyP",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -264,
      "y": -23.33333333333337,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 440.1277770996094,
      "height": 169.75161368452592,
      "seed": 872988295,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462220033,
      "link": null,
      "locked": false,
      "fontSize": 135.80129094762074,
      "fontFamily": 1,
      "text": "Golang",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Golang",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 290,
      "versionNonce": 807949819,
      "isDeleted": false,
      "id": "fwm4r4B-fo8Rlp9J44Uth",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 644.5,
      "y": 234,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 836.3194580078125,
      "height": 200,
      "seed": 555905897,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "var foo int                  // declaração sem inicialização\nvar foo int = 42            // declaração com inicialização\nvar foo, bar int = 42, 1302 // declara e inicia variáveis múltiplas de uma vez\nvar foo = 42               // tipo omitido, será inferido\nfoo := 42                   // abreviadamente, apenas em corpos de funções, omite\n                            // a palavra-chave var, o tipo está sempre implícito\n\nconst constant = \"Essa é uma constante\"",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "var foo int                  // declaração sem inicialização\nvar foo int = 42            // declaração com inicialização\nvar foo, bar int = 42, 1302 // declara e inicia variáveis múltiplas de uma vez\nvar foo = 42               // tipo omitido, será inferido\nfoo := 42                   // abreviadamente, apenas em corpos de funções, omite\n                            // a palavra-chave var, o tipo está sempre implícito\n\nconst constant = \"Essa é uma constante\"",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 159,
      "versionNonce": 1044504219,
      "isDeleted": false,
      "id": "-7AzRIVSuZ-_JfktSQORr",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 643.5,
      "y": 186,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 168.0559539794922,
      "height": 35,
      "seed": 2033545287,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Declarações",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Declarações",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 75,
      "versionNonce": 761353019,
      "isDeleted": false,
      "id": "FbtMU_Zvq81TQrg3wijfO",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 649.5,
      "y": 546.5,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 105.13995361328125,
      "height": 35,
      "seed": 1554779177,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Funções",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Funções",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 345,
      "versionNonce": 1038693339,
      "isDeleted": false,
      "id": "mg_wYnlMCQyzA6WR-H7JZ",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 649.25,
      "y": 593.25,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1271.8189697265625,
      "height": 550,
      "seed": 444135079,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "func functionName() {}                          // uma função simples\n\nfunc functionName(param1 string, param2 int) {} // função com parâmetros (novamente, os tipos vêm depois dos identificadores)\n\nfunc functionName(param1, param2 int) {}        // vários parâmetros do mesmo tipo\n\nfunc functionName() int {                        // retorno do tipo de declaração\n  return 42\n}\n\nfunc returnMulti() (int, string) {                 // Pode retornar vários valores de uma vez\n  return 42, \"foobar\"\n}\nvar x, str = returnMulti()\n\nfunc returnMulti2() (n int, s string) {            // Retorne vários resultados nomeados simplesmente usando return\n  n = 42\n  s = \"foobar\"\n\n  return                                         // n e s serão retornados\n}\nvar x, str = returnMulti2()",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "func functionName() {}                          // uma função simples\n\nfunc functionName(param1 string, param2 int) {} // função com parâmetros (novamente, os tipos vêm depois dos identificadores)\n\nfunc functionName(param1, param2 int) {}        // vários parâmetros do mesmo tipo\n\nfunc functionName() int {                        // retorno do tipo de declaração\n  return 42\n}\n\nfunc returnMulti() (int, string) {                 // Pode retornar vários valores de uma vez\n  return 42, \"foobar\"\n}\nvar x, str = returnMulti()\n\nfunc returnMulti2() (n int, s string) {            // Retorne vários resultados nomeados simplesmente usando return\n  n = 42\n  s = \"foobar\"\n\n  return                                         // n e s serão retornados\n}\nvar x, str = returnMulti2()",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 93,
      "versionNonce": 2146173051,
      "isDeleted": false,
      "id": "scWnondtcFRL6wZYfrdV1",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2014.5,
      "y": 542.5,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 436.9118347167969,
      "height": 35,
      "seed": 1171403433,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Funções com Valores e Closures",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Funções com Valores e Closures",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 302,
      "versionNonce": 1563179291,
      "isDeleted": false,
      "id": "JGakMfRP-QtW9JD3p1fPQ",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2013.666666666667,
      "y": 589.5833333333334,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1446.3388671875,
      "height": 675,
      "seed": 1414272713,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "func main() {\n  add := func(a, b int) int {  // atribuindo uma função a um nome\n    return a + b\n  }\n  fmt.Println(add(3, 4))   // use o nome para chamar a função\n}\n\nfunc scope() func() int{  // Closures, com escopo léxico: As funções podem acessar valores que foram declarados no escopo ao definir a função \n  outerVar := 2\n  foo := func() int { return outerVar}\n  return foo\n}\n\nfunc anotherScope() func() int{\n  outerVar = 444        // não compilará porque outerVar e foo não estão definidos neste escopo\n  return foo\n}\n\nfunc outer() (func() int, int) {  // Closures\n  outerVar := 2\n  inner := func() int {\n    outerVar += 99      // outerVar do escopo externo é mutada.\n    return outerVar\n  }\n  inner()\n  return inner, outerVar  // retorno da função inner e variável mutada outerVar 101\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "func main() {\n  add := func(a, b int) int {  // atribuindo uma função a um nome\n    return a + b\n  }\n  fmt.Println(add(3, 4))   // use o nome para chamar a função\n}\n\nfunc scope() func() int{  // Closures, com escopo léxico: As funções podem acessar valores que foram declarados no escopo ao definir a função \n  outerVar := 2\n  foo := func() int { return outerVar}\n  return foo\n}\n\nfunc anotherScope() func() int{\n  outerVar = 444        // não compilará porque outerVar e foo não estão definidos neste escopo\n  return foo\n}\n\nfunc outer() (func() int, int) {  // Closures\n  outerVar := 2\n  inner := func() int {\n    outerVar += 99      // outerVar do escopo externo é mutada.\n    return outerVar\n  }\n  inner()\n  return inner, outerVar  // retorno da função inner e variável mutada outerVar 101\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 91,
      "versionNonce": 1662803387,
      "isDeleted": false,
      "id": "3bnsAB267CKCNGiNe5Fgr",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -252.34523809523705,
      "y": 550.714285714286,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 259.139892578125,
      "height": 35,
      "seed": 1954594503,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Funções Variadicas",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Funções Variadicas",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 417,
      "versionNonce": 1289678427,
      "isDeleted": false,
      "id": "caEiKhyYohd7metug7fSP",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -251.98809523809405,
      "y": 595.8928571428575,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 793.83935546875,
      "height": 475,
      "seed": 1372251175,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "// Usando ... antes do nome do tipo do último parâmetro,\n// você pode indicar que esse parâmetro leva zero ou mais desses parâmetros.\n// A função é invocada como qualquer outra função,\n// exceto que podemos passar quantos argumentos quisermos.\nfunc adder(args ...int) int {\n  total := 0\n  for _, v := range args { // Repete os argumentos, seja qual for o número.\n    total += v\n  }\n  return total\n}\n\nfunc main() {\n  fmt.Println(adder(1, 2, 3)) // 6\n  fmt.Println(adder(9, 9))  // 18\n\n  nums := []int{10, 20, 30}\n  fmt.Println(adder(nums...)) // 60\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "// Usando ... antes do nome do tipo do último parâmetro,\n// você pode indicar que esse parâmetro leva zero ou mais desses parâmetros.\n// A função é invocada como qualquer outra função,\n// exceto que podemos passar quantos argumentos quisermos.\nfunc adder(args ...int) int {\n  total := 0\n  for _, v := range args { // Repete os argumentos, seja qual for o número.\n    total += v\n  }\n  return total\n}\n\nfunc main() {\n  fmt.Println(adder(1, 2, 3)) // 6\n  fmt.Println(adder(9, 9))  // 18\n\n  nums := []int{10, 20, 30}\n  fmt.Println(adder(nums...)) // 60\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 275,
      "versionNonce": 1296460539,
      "isDeleted": false,
      "id": "B-Nz-JhtEoxu-_gzzQWBv",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -256.4523809523796,
      "y": 200.00000000000023,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 238.02789306640625,
      "height": 35,
      "seed": 1821642087,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Tipos Integrados",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Tipos Integrados",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 176,
      "versionNonce": 416633755,
      "isDeleted": false,
      "id": "j1qMN7ZeqsbtaPBPvDL7o",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -246.4523809523796,
      "y": 246.25000000000023,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 841.4793701171875,
      "height": 200,
      "seed": 306146407,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "bool\nstring\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64 uintptr\nbyte // apelido para uint8\nrune // apelido para int32 ~= um caractere (ponto de código Unicode) - muito Viking\nfloat32 float64\ncomplex64 complex128",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "bool\nstring\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64 uintptr\nbyte // apelido para uint8\nrune // apelido para int32 ~= um caractere (ponto de código Unicode) - muito Viking\nfloat32 float64\ncomplex64 complex128",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 232,
      "versionNonce": 800991291,
      "isDeleted": false,
      "id": "2cY11IdIwMXzJDMSJ0_3t",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1602.2976190476206,
      "y": 221.25000000000023,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 266.4997863769531,
      "height": 200,
      "seed": 1239826761,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "var i int = 42\nvar f float64 = float64(i)\nvar u uint = uint(f)\n\n// sintaxe alternativa\ni := 42\nf := float64(i)\nu := uint(f)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "var i int = 42\nvar f float64 = float64(i)\nvar u uint = uint(f)\n\n// sintaxe alternativa\ni := 42\nf := float64(i)\nu := uint(f)",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 429,
      "versionNonce": 1742956763,
      "isDeleted": false,
      "id": "-aShvylZ5Jigm4PR_93iA",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1594.7976190476206,
      "y": 186.25000000000023,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 260.37188720703125,
      "height": 35,
      "seed": 388520903,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Conversões de tipo",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Conversões de tipo",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 48,
      "versionNonce": 1056878901,
      "isDeleted": false,
      "id": "0rsSVmxVTcyzUKdhFrCSY",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 706.0800258091524,
      "y": 1389.0178571428567,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 323.4278564453125,
      "height": 35,
      "seed": 777726677,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984301,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Estruturas de controle",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Estruturas de controle",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 73,
      "versionNonce": 999603675,
      "isDeleted": false,
      "id": "_TdyVD22238FxkYo7lNrY",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 707.7466924758189,
      "y": 1456.2678571428567,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 28.86798095703125,
      "height": 35,
      "seed": 389284219,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984301,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "If",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "If",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 84,
      "versionNonce": 898968021,
      "isDeleted": false,
      "id": "Bg2_y4c1KEehWbwQh6xTS",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 709.7921470212735,
      "y": 1500.5860389610384,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 583.4196166992188,
      "height": 600,
      "seed": 1335105211,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984301,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "func main() {\n  // Mais básico\n  if x > 10 {\n    return x\n  } else if x == 10 {\n    return 10\n  } else {\n    return -x\n  }\n\n  // Você pode colocar uma declaração antes da condição\n  if a := b + c; a < 42 {\n    return a\n  } else {\n    return a - 42\n  }\n\n  // Afirmação de tipo dentro do if\n  var val interface{}\n  val = \"foo\"\n  if str, ok := val.(string); ok {\n    fmt.Println(str)\n  }\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "func main() {\n  // Mais básico\n  if x > 10 {\n    return x\n  } else if x == 10 {\n    return 10\n  } else {\n    return -x\n  }\n\n  // Você pode colocar uma declaração antes da condição\n  if a := b + c; a < 42 {\n    return a\n  } else {\n    return a - 42\n  }\n\n  // Afirmação de tipo dentro do if\n  var val interface{}\n  val = \"foo\"\n  if str, ok := val.(string); ok {\n    fmt.Println(str)\n  }\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 314,
      "versionNonce": 156968757,
      "isDeleted": false,
      "id": "mnO-bwa7WGZR-5C9jkan3",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1370.806046851922,
      "y": 1449.3372295642741,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 76.803955078125,
      "height": 35,
      "seed": 282754837,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984301,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Loops",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Loops",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 133,
      "versionNonce": 716559003,
      "isDeleted": false,
      "id": "I7SSGanxxUtpo3xCksHun",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1376.629430735999,
      "y": 1492.5879556855405,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 802.3193969726562,
      "height": 925,
      "seed": 81031189,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984301,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "// Há apenas `for`, não `while`, não `until`\nfor i := 1; i < 10; i++ {\n}\nfor ; i < 10;  { // while - loop\n}\nfor i < 10  { // você pode omitir ponto-e-vírgula se houver apenas uma condição\n}\nfor { // você pode omitir a condição == while(true){}\n}\n\n// Use break/continue no loop atual\n// Use break/continue com etiqueta no laço externo\nhere:\nfor i := 0; i < 2; i++ {\n  for j := i + 1; j < 3; j++ {\n    if i == 0 {\n      continue here\n    }\n    fmt.Println(j)\n    if j == 2 {\n      break\n    }\n  }\n}\n\nthere:\nfor i := 0; i < 2; i++ {\n  for j := i + 1; j < 3; j++ {\n    if j == 1 {\n      continue\n    }\n    fmt.Println(j)\n    if j == 2 {\n      break there\n    }\n  }\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "// Há apenas `for`, não `while`, não `until`\nfor i := 1; i < 10; i++ {\n}\nfor ; i < 10;  { // while - loop\n}\nfor i < 10  { // você pode omitir ponto-e-vírgula se houver apenas uma condição\n}\nfor { // você pode omitir a condição == while(true){}\n}\n\n// Use break/continue no loop atual\n// Use break/continue com etiqueta no laço externo\nhere:\nfor i := 0; i < 2; i++ {\n  for j := i + 1; j < 3; j++ {\n    if i == 0 {\n      continue here\n    }\n    fmt.Println(j)\n    if j == 2 {\n      break\n    }\n  }\n}\n\nthere:\nfor i := 0; i < 2; i++ {\n  for j := i + 1; j < 3; j++ {\n    if j == 1 {\n      continue\n    }\n    fmt.Println(j)\n    if j == 2 {\n      break there\n    }\n  }\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 628,
      "versionNonce": 1924458581,
      "isDeleted": false,
      "id": "ZlPUlKSwIKsEyE6ED7EKc",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -224.9316910208205,
      "y": 1500.2395996174087,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 908.3193969726562,
      "height": 1350,
      "seed": 476206421,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "// switch statement\nswitch operatingSystem {\n  case \"darwin\":\n    fmt.Println(\"Mac OS Hipster\")\n    // cases quebrão automaticamente, sem fallthrough por padrão\n  case \"linux\":\n    fmt.Println(\"Linux Geek\")\n  default:\n    // Windows, BSD, ...\n    fmt.Println(\"Other\")\n}\n\n// assim como no for e no if, você pode ter uma declaração de atribuição antes do switch\nswitch os := runtime.GOOS; os {\n  case \"darwin\": ...\n}\n\n// você também pode fazer comparações em casos de troca\nnumber := 42\nswitch {\n  case number < 42:\n    fmt.Println(\"Smaller\")\n  case number == 42:\n    fmt.Println(\"Equal\")\n  case number > 42:\n    fmt.Println(\"Greater\")\n}\n\n// cases podem ser apresentados em listas separadas por vírgulas\nvar char byte = '?'\nswitch char {\n  case ' ', '?', '&', '=', '#', '+', '%':\n    fmt.Println(\"Should escape\")\n}\n\n// Um switch de tipo é como uma instrução switch regular, mas os casos\n// em um switch de tipo especificam tipos (não valores), e esses tipos são\n// comparados com o tipo do valor mantido pelo valor de interface fornecido.\nfunc do(i interface{}) {\n  switch v := i.(type) {\n    case int:\n      fmt.Printf(\"Twice %v is %v\\n\", v, v*2)\n    case string:\n      fmt.Printf(\"%q is %v bytes long\\n\", v, len(v))\n    default:\n      fmt.Printf(\"I don't know about type %T!\\n\", v)\n  }\n}\n\nfunc main() {\n  do(21)\n  do(\"hello\")\n  do(true)\n}  ",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "// switch statement\nswitch operatingSystem {\n  case \"darwin\":\n    fmt.Println(\"Mac OS Hipster\")\n    // cases quebrão automaticamente, sem fallthrough por padrão\n  case \"linux\":\n    fmt.Println(\"Linux Geek\")\n  default:\n    // Windows, BSD, ...\n    fmt.Println(\"Other\")\n}\n\n// assim como no for e no if, você pode ter uma declaração de atribuição antes do switch\nswitch os := runtime.GOOS; os {\n  case \"darwin\": ...\n}\n\n// você também pode fazer comparações em casos de troca\nnumber := 42\nswitch {\n  case number < 42:\n    fmt.Println(\"Smaller\")\n  case number == 42:\n    fmt.Println(\"Equal\")\n  case number > 42:\n    fmt.Println(\"Greater\")\n}\n\n// cases podem ser apresentados em listas separadas por vírgulas\nvar char byte = '?'\nswitch char {\n  case ' ', '?', '&', '=', '#', '+', '%':\n    fmt.Println(\"Should escape\")\n}\n\n// Um switch de tipo é como uma instrução switch regular, mas os casos\n// em um switch de tipo especificam tipos (não valores), e esses tipos são\n// comparados com o tipo do valor mantido pelo valor de interface fornecido.\nfunc do(i interface{}) {\n  switch v := i.(type) {\n    case int:\n      fmt.Printf(\"Twice %v is %v\\n\", v, v*2)\n    case string:\n      fmt.Printf(\"%q is %v bytes long\\n\", v, len(v))\n    default:\n      fmt.Printf(\"I don't know about type %T!\\n\", v)\n  }\n}\n\nfunc main() {\n  do(21)\n  do(\"hello\")\n  do(true)\n}  ",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 47,
      "versionNonce": 1840001915,
      "isDeleted": false,
      "id": "lDEMe3UTvYFUlc2ZXF_k3",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -219.04475765838959,
      "y": 1452.5964528929514,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 83.91593933105469,
      "height": 35,
      "seed": 1095891707,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Switch",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Switch",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 357,
      "versionNonce": 956241333,
      "isDeleted": false,
      "id": "WMHfjlsPhm2OnHy5-xFUh",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2384.0123434830516,
      "y": 1390.7478935461718,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 302.23187255859375,
      "height": 35,
      "seed": 1359487483,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Arrays, Slices, Ranges",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Arrays, Slices, Ranges",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 128,
      "versionNonce": 711855131,
      "isDeleted": false,
      "id": "aNZxNT2vvYBKZ1tly7q0D",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2394.7653334717616,
      "y": 1483.8798877588551,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1043.379150390625,
      "height": 200,
      "seed": 1115637205,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "var a [10]int // declara um array int com 10 de comprimento. O comprimento do array faz parte do tipo!\na[3] = 42     // definine elementos\ni := a[3]     // lê elementos\n\n// declara e inicializa\nvar a = [2]int{1, 2}\na := [2]int{1, 2}   // forma abreviada\na := [...]int{1, 2} // reticências -> Compilador calcula o comprimento do array",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "var a [10]int // declara um array int com 10 de comprimento. O comprimento do array faz parte do tipo!\na[3] = 42     // definine elementos\ni := a[3]     // lê elementos\n\n// declara e inicializa\nvar a = [2]int{1, 2}\na := [2]int{1, 2}   // forma abreviada\na := [...]int{1, 2} // reticências -> Compilador calcula o comprimento do array",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 319,
      "versionNonce": 73176853,
      "isDeleted": false,
      "id": "WXkD1RBfLh7Sy7PCx70yV",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2382.6362965791463,
      "y": 1442.5278955586714,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 89.4599609375,
      "height": 35,
      "seed": 991439829,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Arrays",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Arrays",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 88,
      "versionNonce": 1856753851,
      "isDeleted": false,
      "id": "_VD9VkPYdEAkQrUt9ZICR",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2393.0487861328043,
      "y": 1756.3504867192328,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1101.33935546875,
      "height": 475,
      "seed": 181900699,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "var a []int                // declara um slice - semelhante a um array, mas o comprimento não é especificado\nvar a = []int {1, 2, 3, 4} // declara e inicializa um slice (apoiado pelo array dado implicitamente)\na := []int{1, 2, 3, 4}     // forma abreviada\nchars := []string{0:\"a\", 2:\"c\", 1: \"b\"} // [\"a\", \"b\", \"c\"]\n\nvar b = a[lo:hi]    // cria um slice (fatia de um array) do índice lo para hi-1\nvar b = a[1:4]      // slice do índice 1 ao 3\nvar b = a[:3]       // falta de índice baixo implica 0\nvar b = a[3:]       // falta de índice alto implica len(a)\na =  append(a,17,3) // acrescenta itens para o slice a\nc := append(a,b...) // concatena os slices a e b\n\n// crie uma fatia com make\na = make([]byte, 5, 5) // segundo argumento comprimento, terceiro capacidade\na = make([]byte, 5)  // capacidade é opcional\n\n// crie uma slice de um array\nx := [3]string{\"Лайка\", \"Белка\", \"Стрелка\"}\ns := x[:] // um slice referenciando o armazenamento de x",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "var a []int                // declara um slice - semelhante a um array, mas o comprimento não é especificado\nvar a = []int {1, 2, 3, 4} // declara e inicializa um slice (apoiado pelo array dado implicitamente)\na := []int{1, 2, 3, 4}     // forma abreviada\nchars := []string{0:\"a\", 2:\"c\", 1: \"b\"} // [\"a\", \"b\", \"c\"]\n\nvar b = a[lo:hi]    // cria um slice (fatia de um array) do índice lo para hi-1\nvar b = a[1:4]      // slice do índice 1 ao 3\nvar b = a[:3]       // falta de índice baixo implica 0\nvar b = a[3:]       // falta de índice alto implica len(a)\na =  append(a,17,3) // acrescenta itens para o slice a\nc := append(a,b...) // concatena os slices a e b\n\n// crie uma fatia com make\na = make([]byte, 5, 5) // segundo argumento comprimento, terceiro capacidade\na = make([]byte, 5)  // capacidade é opcional\n\n// crie uma slice de um array\nx := [3]string{\"Лайка\", \"Белка\", \"Стрелка\"}\ns := x[:] // um slice referenciando o armazenamento de x",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 74,
      "versionNonce": 2135092341,
      "isDeleted": false,
      "id": "9GDD09VU5OIyQalssfelU",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2386.457760839246,
      "y": 1714.6243295373856,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 75.09596252441406,
      "height": 35,
      "seed": 1901780437,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Slices",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Slices",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 299,
      "versionNonce": 1769444821,
      "isDeleted": false,
      "id": "K2ggnWI1c01D_Gx1eoTX0",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 3588.4443736104513,
      "y": 1483.8443892700798,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 834.499267578125,
      "height": 550,
      "seed": 405951931,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "len(a) dá a você o comprimento de um array/slice. \nÉ uma função integrada, não um atributo/método de um array.\n\n// loop sobre um array/slice\nfor i, e := range a {\n  // 'i' é o índice, e 'e' o elemento\n}\n\n// se você só precisa do elemento:\nfor _, e := range a {\n  // 'e' é o elemento\n}\n\n// ...e se você só precisa do índice\nfor i := range a {\n}\n\n// Em Go pre-1.4, você obterá um erro do compilador se não estiver usando 'i' e 'e'.\n// Go 1.4 introduziu uma forma livre de variável, para que você possa fazer isso\nfor range time.Tick(time.Second) {\n  // faça isso uma vez por segundo\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "len(a) dá a você o comprimento de um array/slice. \nÉ uma função integrada, não um atributo/método de um array.\n\n// loop sobre um array/slice\nfor i, e := range a {\n  // 'i' é o índice, e 'e' o elemento\n}\n\n// se você só precisa do elemento:\nfor _, e := range a {\n  // 'e' é o elemento\n}\n\n// ...e se você só precisa do índice\nfor i := range a {\n}\n\n// Em Go pre-1.4, você obterá um erro do compilador se não estiver usando 'i' e 'e'.\n// Go 1.4 introduziu uma forma livre de variável, para que você possa fazer isso\nfor range time.Tick(time.Second) {\n  // faça isso uma vez por segundo\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 37,
      "versionNonce": 1003822587,
      "isDeleted": false,
      "id": "N9Rd-PYtS5ZLr4QdTfkIW",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 3588.2777069437843,
      "y": 1432.5110559367456,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 409.163818359375,
      "height": 35,
      "seed": 1810676309,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Operações em Arrays e Slices",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Operações em Arrays e Slices",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 287,
      "versionNonce": 1235956475,
      "isDeleted": false,
      "id": "hBx-SpIBQv9U3_-5T9t3l",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2388.5872307533077,
      "y": 2322.892008317698,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 892.1393432617188,
      "height": 450,
      "seed": 291875797,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "var m map[string]int\nm = make(map[string]int)\nm[\"key\"] = 42\nfmt.Println(m[\"key\"])\n\ndelete(m, \"key\")\n\nelem, ok := m[\"key\"] // testa se a chave \"key\" está presente e retorna isso, caso esteja\n\n// map literal\nvar m = map[string]Vertex{\n  \"Bell Labs\": {40.68433, -74.39967},\n  \"Google\":  {37.42202, -122.08408},\n}\n\n// iterar sobre o conteúdo do map\nfor key, value := range m {\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "var m map[string]int\nm = make(map[string]int)\nm[\"key\"] = 42\nfmt.Println(m[\"key\"])\n\ndelete(m, \"key\")\n\nelem, ok := m[\"key\"] // testa se a chave \"key\" está presente e retorna isso, caso esteja\n\n// map literal\nvar m = map[string]Vertex{\n  \"Bell Labs\": {40.68433, -74.39967},\n  \"Google\":  {37.42202, -122.08408},\n}\n\n// iterar sobre o conteúdo do map\nfor key, value := range m {\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 122,
      "versionNonce": 1611779637,
      "isDeleted": false,
      "id": "fkebUn5r9AD5PwDB2yOT_",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2390.0158021818784,
      "y": 2274.32057974627,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 69.13197326660156,
      "height": 35,
      "seed": 1222371419,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Maps",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Maps",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 322,
      "versionNonce": 1029774235,
      "isDeleted": false,
      "id": "iIUDydgqlOhitEnPzCzDL",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -229.55562638954825,
      "y": 3022.3205797462683,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 105.86795043945312,
      "height": 35,
      "seed": 1187079579,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Structs",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Structs",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 846,
      "versionNonce": 428097429,
      "isDeleted": false,
      "id": "uSTdhLcBqT-YttEJr1HbJ",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 725.444373610452,
      "y": 3017.320579746268,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 127.11993408203125,
      "height": 35,
      "seed": 301346779,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Ponteiros",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Ponteiros",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 593,
      "versionNonce": 1603334203,
      "isDeleted": false,
      "id": "D9A96Mgv3wKuK3SNfwUPt",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -229.55562638954825,
      "y": 3063.3205797462683,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 862.4393310546875,
      "height": 975,
      "seed": 334655093,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Não há classes, apenas structs. As structs podem ter métodos.\n\n// Uma struct é um tipo. É também uma coleção de campos\n\n// Declaração\ntype Vertex struct {\n  X, Y int\n}\n\n// Criando\nvar v = Vertex{1, 2}\nvar v = Vertex{X: 1, Y: 2}          // Cria uma struct definindo valores com chaves\nvar v = []Vertex{{1,2},{5,2},{5,5}} // Inicializa um slice de structs\n\n// Acessando membros\nv.X = 4\n\n// Você pode declarar métodos em structs. A struct que você quer declarar o\n// método (o tipo de recebimento) fica entre a palavra-chave func e\n// o nome do método. A struct é copiado em cada método de chamada(!)\nfunc (v Vertex) Abs() float64 {\n  return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\n// Método de chamada\nv.Abs()\n\n// Para métodos mutantes, você precisa usar um ponteiro (olhe abaixo) A Struct\n// como o tipo.Com isso, o valor da struct não é copiado para a chamada do método.\nfunc (v *Vertex) add(n float64) {\n  v.X += n\n  v.Y += n\n}\n\n// Structs anônimas:\n// Mais barato e seguro do que usar `map[string]interface{}`.\npoint := struct {\n  X, Y int\n}{1, 2}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Não há classes, apenas structs. As structs podem ter métodos.\n\n// Uma struct é um tipo. É também uma coleção de campos\n\n// Declaração\ntype Vertex struct {\n  X, Y int\n}\n\n// Criando\nvar v = Vertex{1, 2}\nvar v = Vertex{X: 1, Y: 2}          // Cria uma struct definindo valores com chaves\nvar v = []Vertex{{1,2},{5,2},{5,5}} // Inicializa um slice de structs\n\n// Acessando membros\nv.X = 4\n\n// Você pode declarar métodos em structs. A struct que você quer declarar o\n// método (o tipo de recebimento) fica entre a palavra-chave func e\n// o nome do método. A struct é copiado em cada método de chamada(!)\nfunc (v Vertex) Abs() float64 {\n  return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\n// Método de chamada\nv.Abs()\n\n// Para métodos mutantes, você precisa usar um ponteiro (olhe abaixo) A Struct\n// como o tipo.Com isso, o valor da struct não é copiado para a chamada do método.\nfunc (v *Vertex) add(n float64) {\n  v.X += n\n  v.Y += n\n}\n\n// Structs anônimas:\n// Mais barato e seguro do que usar `map[string]interface{}`.\npoint := struct {\n  X, Y int\n}{1, 2}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 1001,
      "versionNonce": 2017785371,
      "isDeleted": false,
      "id": "DaFs5vR3xieI23TTZzwsv",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 725.5872307533089,
      "y": 3059.6777226034105,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 878.3994140625,
      "height": 175,
      "seed": 1915260283,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "p := Vertex{1, 2}  // p é um Vertex\nq := &p            // q é um ponteiro para um Vertex\nr := &Vertex{1, 2} // r também é um ponteiro para um Vertex\n\n// O tipo de um ponteiro para um Vertex é *Vertex\n\nvar s *Vertex = new(Vertex) // new cria um ponteiro para uma nova instância de struct",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "p := Vertex{1, 2}  // p é um Vertex\nq := &p            // q é um ponteiro para um Vertex\nr := &Vertex{1, 2} // r também é um ponteiro para um Vertex\n\n// O tipo de um ponteiro para um Vertex é *Vertex\n\nvar s *Vertex = new(Vertex) // new cria um ponteiro para uma nova instância de struct",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 804,
      "versionNonce": 102480213,
      "isDeleted": false,
      "id": "wFZQecZIZAhDHjISQH7IW",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 721.7538974199754,
      "y": 3259.011055936744,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 148.37193298339844,
      "height": 35,
      "seed": 1789584059,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Interfaces",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Interfaces",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 844,
      "versionNonce": 1167520379,
      "isDeleted": false,
      "id": "XQei049_XViaKzCtJJ76X",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 722.9205640866421,
      "y": 3310.844389270077,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 655.139404296875,
      "height": 325,
      "seed": 1893390843,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "// declaração de interface\ntype Awesomizer interface {\n  Awesomize() string\n}\n\n// tipos *não* declaram para implementar interfaces\ntype Foo struct {}\n\n// em vez disso, os tipos satisfazem implicitamente uma interface\n// se implementarem todos os métodos necessários\nfunc (foo Foo) Awesomize() string {\n  return \"Awesome!\"\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "// declaração de interface\ntype Awesomizer interface {\n  Awesomize() string\n}\n\n// tipos *não* declaram para implementar interfaces\ntype Foo struct {}\n\n// em vez disso, os tipos satisfazem implicitamente uma interface\n// se implementarem todos os métodos necessários\nfunc (foo Foo) Awesomize() string {\n  return \"Awesome!\"\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 103,
      "versionNonce": 535504059,
      "isDeleted": false,
      "id": "fxRn6ygWoxH1EeRb7A_zr",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 722.5872307533075,
      "y": 3709.011055936745,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 825.2593994140625,
      "height": 575,
      "seed": 1741218075,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Não há subclasses no Go. Em vez disso, há incorporação de interface e estrutura.\n\n// ReadWriter sua implementação devem satisfazer ambos Reader e Writer\ntype ReadWriter interface {\n  Reader\n  Writer\n}\n\n// Server expõe todos os métodos que o Logger tem\ntype Server struct {\n  Host string\n  Port int\n  *log.Logger\n}\n\n// inicialize o tipo incorporado da maneira usual\nserver := &Server{\"localhost\", 80, log.New(...)}\n\n// métodos implementados na estrutura incorporada são passados ​​por\nserver.Log(...) // chama server.Logger.Log(...)\n\n// o nome do campo do tipo incorporado é o seu nome de tipo (neste caso Logger)\nvar logger *log.Logger = server.Logger",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Não há subclasses no Go. Em vez disso, há incorporação de interface e estrutura.\n\n// ReadWriter sua implementação devem satisfazer ambos Reader e Writer\ntype ReadWriter interface {\n  Reader\n  Writer\n}\n\n// Server expõe todos os métodos que o Logger tem\ntype Server struct {\n  Host string\n  Port int\n  *log.Logger\n}\n\n// inicialize o tipo incorporado da maneira usual\nserver := &Server{\"localhost\", 80, log.New(...)}\n\n// métodos implementados na estrutura incorporada são passados ​​por\nserver.Log(...) // chama server.Logger.Log(...)\n\n// o nome do campo do tipo incorporado é o seu nome de tipo (neste caso Logger)\nvar logger *log.Logger = server.Logger",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 102,
      "versionNonce": 55761013,
      "isDeleted": false,
      "id": "AZFDJTJvdvv4NJZeFCgti",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 722.5872307533077,
      "y": 3659.011055936745,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 178.2199249267578,
      "height": 35,
      "seed": 806513243,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711461984302,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Incorporação",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Incorporação",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 163,
      "versionNonce": 920098171,
      "isDeleted": false,
      "id": "LiTSOCQyHTKVkD67Zg_8D",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 3547.349135515211,
      "y": 588.011055936745,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 970.8991088867188,
      "height": 500,
      "seed": 701934997,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Não há tratamento de exceção. \nFunções que podem produzir um erro apenas declaram um valor de retorno adicional do tipo Error.\n\n// Esta é a interface `Error`:\ntype error interface {\n  Error() string\n}\n\n// Uma função que pode retornar um erro:\nfunc doStuff() (int, error) {\n}\n\nfunc main() {\n  result, err := doStuff()\n  if err != nil {\n    // lidar com erro\n  } else {\n    // tudo está bem, use o resultado\n  }\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Não há tratamento de exceção. \nFunções que podem produzir um erro apenas declaram um valor de retorno adicional do tipo Error.\n\n// Esta é a interface `Error`:\ntype error interface {\n  Error() string\n}\n\n// Uma função que pode retornar um erro:\nfunc doStuff() (int, error) {\n}\n\nfunc main() {\n  result, err := doStuff()\n  if err != nil {\n    // lidar com erro\n  } else {\n    // tudo está bem, use o resultado\n  }\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 264,
      "versionNonce": 1004351003,
      "isDeleted": false,
      "id": "jItzzv4ERMrFVemC466ds",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 3545.9205640866394,
      "y": 536.3443892700784,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 73.66796875,
      "height": 35,
      "seed": 3595579,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462003717,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Erros",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Erros",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 175,
      "versionNonce": 75554325,
      "isDeleted": false,
      "id": "M5_aP2dbrYhEXYBvMe8JA",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2762.206278372353,
      "y": 3017.2491511748385,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 167.52392578125,
      "height": 35,
      "seed": 62394875,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462203656,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Concorrencia",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Concorrencia",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 264,
      "versionNonce": 558257013,
      "isDeleted": false,
      "id": "8wvogUPRNj_mYnZ9JiDTn",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1779.111040277115,
      "y": 3140.1062940319816,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 920.2792358398438,
      "height": 400,
      "seed": 414978741,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462203656,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Goroutines são threads leves (gerenciados pelo Go, e não threads de sistema operacional). \ngo f(a, b) inicia um novo goroutine que executa f (dado f é uma função).\n\n// apenas uma função (que pode ser iniciada posteriormente como uma goroutine)\nfunc doStuff(s string) {\n}\n\nfunc main() {\n  // usando uma função nomeada em um goroutine\n  go doStuff(\"foobar\")\n\n  // usando uma função interna anônima em uma goroutine\n  go func (x int) {\n    // o corpo da função vai aqui\n  }(42)// executa a função apos ser criada\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Goroutines são threads leves (gerenciados pelo Go, e não threads de sistema operacional). \ngo f(a, b) inicia um novo goroutine que executa f (dado f é uma função).\n\n// apenas uma função (que pode ser iniciada posteriormente como uma goroutine)\nfunc doStuff(s string) {\n}\n\nfunc main() {\n  // usando uma função nomeada em um goroutine\n  go doStuff(\"foobar\")\n\n  // usando uma função interna anônima em uma goroutine\n  go func (x int) {\n    // o corpo da função vai aqui\n  }(42)// executa a função apos ser criada\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 243,
      "versionNonce": 1685462229,
      "isDeleted": false,
      "id": "SIH5wTMDdPsYdulQlqxUN",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1776.944373610448,
      "y": 3090.344389270078,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 146.60792541503906,
      "height": 35,
      "seed": 363707221,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462203656,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Goroutines",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Goroutines",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 292,
      "versionNonce": 900053557,
      "isDeleted": false,
      "id": "lBA-DfdFaeN3S53xQAaQW",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2769.682468848543,
      "y": 3133.201532127221,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1085.6390380859375,
      "height": 900,
      "seed": 1154070971,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462203656,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "// Blocos de channel sem buffer.\n// Lê os blocos quando nenhum valor estiver disponível,\n// escreve os blocos até que haja uma leitura.\nch := make(chan int) // crie um channel do tipo int\nch <- 42             // envia um valor para o channel ch.\nv := <-ch            // recebe um valor de ch\n\n\n// Cria um channel com buffer.\n// A gravação em channels com buffer não bloqueia a menos que\n// o <tamanho do buffer> seja maior que valores não lidos forem gravados.\nch := make(chan int, 100)\n\nclose(ch) // fecha o channel (apenas o sender deve fechar)\n\n// lê o channel e testa se ele foi fechado\nv, ok := <-ch\n\n// se ok for falso, o channel foi fechado\n\n// Lê o channel até que seja fechado\nfor i := range ch {\n  fmt.Println(i)\n}\n\n// seleciona blocos em operações de múltiplos canais, se um desbloquear, o caso correspondente é executado\nfunc doStuff(channelOut, channelIn chan int) {\n  select {\n    case channelOut <- 42:\n      fmt.Println(\"Poderíamos escrever para channelOut!\")\n    case x := <- channelIn:\n      fmt.Println(\"Nós poderíamos ler de channelIn\")\n    case <-time.After(time.Second * 1):\n      fmt.Println(\"tempo esgotado\")\n  }\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "// Blocos de channel sem buffer.\n// Lê os blocos quando nenhum valor estiver disponível,\n// escreve os blocos até que haja uma leitura.\nch := make(chan int) // crie um channel do tipo int\nch <- 42             // envia um valor para o channel ch.\nv := <-ch            // recebe um valor de ch\n\n\n// Cria um channel com buffer.\n// A gravação em channels com buffer não bloqueia a menos que\n// o <tamanho do buffer> seja maior que valores não lidos forem gravados.\nch := make(chan int, 100)\n\nclose(ch) // fecha o channel (apenas o sender deve fechar)\n\n// lê o channel e testa se ele foi fechado\nv, ok := <-ch\n\n// se ok for falso, o channel foi fechado\n\n// Lê o channel até que seja fechado\nfor i := range ch {\n  fmt.Println(i)\n}\n\n// seleciona blocos em operações de múltiplos canais, se um desbloquear, o caso correspondente é executado\nfunc doStuff(channelOut, channelIn chan int) {\n  select {\n    case channelOut <- 42:\n      fmt.Println(\"Poderíamos escrever para channelOut!\")\n    case x := <- channelIn:\n      fmt.Println(\"Nós poderíamos ler de channelIn\")\n    case <-time.After(time.Second * 1):\n      fmt.Println(\"tempo esgotado\")\n  }\n}",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 238,
      "versionNonce": 1840950165,
      "isDeleted": false,
      "id": "RZxdxmQ86KXOBaWoi-YAu",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2771.1705640866385,
      "y": 3086.0586749843633,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 114.57594299316406,
      "height": 35,
      "seed": 769468693,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462203656,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Channels",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Channels",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 160,
      "versionNonce": 753561845,
      "isDeleted": false,
      "id": "WE6qKrcUsP7usZzKTUGPb",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 3891.253897419974,
      "y": 3137.522960698648,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 741.1395263671875,
      "height": 650,
      "seed": 1182577275,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462203656,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "// Um envio para um canal nulo bloqueia ele para sempre\nvar c chan string\nc <- \"Hello, World!\"\n// fatal error: all goroutines are asleep - deadlock!\n\n// Uma recepção de um canal nulo bloqueia para sempre\nvar c chan string\nfmt.Println(<-c)\n// fatal error: all goroutines are asleep - deadlock!\n\n// Um envio para um canal fechado entra em pânico\nvar c = make(chan string, 1)\nc <- \"Hello, World!\"\nclose(c)\nc <- \"Hello, Panic!\"\n// panic: send on closed channel\n\n// Uma recepção de um canal fechado retorna o valor zero imediatamente\nvar c = make(chan int, 2)\nc <- 1\nc <- 2\nclose(c)\nfor i := 0; i < 3; i++ {\n  fmt.Printf(\"%d \", <-c)\n}\n// 1 2 0",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "// Um envio para um canal nulo bloqueia ele para sempre\nvar c chan string\nc <- \"Hello, World!\"\n// fatal error: all goroutines are asleep - deadlock!\n\n// Uma recepção de um canal nulo bloqueia para sempre\nvar c chan string\nfmt.Println(<-c)\n// fatal error: all goroutines are asleep - deadlock!\n\n// Um envio para um canal fechado entra em pânico\nvar c = make(chan string, 1)\nc <- \"Hello, World!\"\nclose(c)\nc <- \"Hello, Panic!\"\n// panic: send on closed channel\n\n// Uma recepção de um canal fechado retorna o valor zero imediatamente\nvar c = make(chan int, 2)\nc <- 1\nc <- 2\nclose(c)\nfor i := 0; i < 3; i++ {\n  fmt.Printf(\"%d \", <-c)\n}\n// 1 2 0",
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 115,
      "versionNonce": 1891273301,
      "isDeleted": false,
      "id": "ufYmsMmXsgk2Ehidu9gO1",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 3893.087230753308,
      "y": 3093.8562940319816,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 202.04791259765625,
      "height": 35,
      "seed": 1365732053,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711462203656,
      "link": null,
      "locked": false,
      "fontSize": 28,
      "fontFamily": 1,
      "text": "Channel Axioms",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Channel Axioms",
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 301,
      "versionNonce": 1778415541,
      "isDeleted": false,
      "id": "97ybwwtg3IswFSKuJl2a0",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "dashed",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1738.5872307533086,
      "y": 2990.689627365316,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 2955,
      "height": 1084.9999999999995,
      "seed": 1059621467,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1711462203656,
      "link": null,
      "locked": false
    },
    {
      "type": "rectangle",
      "version": 197,
      "versionNonce": 1851739445,
      "isDeleted": false,
      "id": "Ss-ypordTnZGxDrioZ0Je",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "dashed",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": -302.9127692466918,
      "y": 2990.4396273653156,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 1930,
      "height": 1315,
      "seed": 2074063227,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1711461984303,
      "link": null,
      "locked": false
    },
    {
      "type": "rectangle",
      "version": 225,
      "versionNonce": 602868891,
      "isDeleted": false,
      "id": "KmrbUMwL4ct38PnTsB-8k",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "dashed",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": -295.62705496097806,
      "y": 1375.6777226034117,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 2497.5,
      "height": 1505.0000000000002,
      "seed": 2118946453,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1711461984303,
      "link": null,
      "locked": false
    },
    {
      "type": "rectangle",
      "version": 306,
      "versionNonce": 1101830293,
      "isDeleted": false,
      "id": "zE2vxuROC7LkwglLgh-HS",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "dashed",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": -285.9484835324047,
      "y": 525.4753416510307,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 4822.5,
      "height": 770.0000000000001,
      "seed": 177830549,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1711462019189,
      "link": null,
      "locked": false
    },
    {
      "type": "rectangle",
      "version": 327,
      "versionNonce": 1539887675,
      "isDeleted": false,
      "id": "kvq9jqLjXdHBE0tlG-N4M",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "dashed",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": -287.94848353240604,
      "y": 177.9753416510299,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 2190,
      "height": 285,
      "seed": 1734149179,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1711462009932,
      "link": null,
      "locked": false
    },
    {
      "type": "rectangle",
      "version": 341,
      "versionNonce": 124743227,
      "isDeleted": false,
      "id": "FdhbLnTNgXOK8lYISAasy",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "dashed",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 2340.0515164675926,
      "y": 1376.1420083176959,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 2111.666666666667,
      "height": 1413.3333333333335,
      "seed": 953497429,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1711462075768,
      "link": null,
      "locked": false
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}